{"ast":null,"code":"// parse = (response) => {\n//     const dictionary = {}\n//     response[\"data\"].forEach((video) => {\n//         dictionary.videos = {\n//             name: video[\"clip\"].name,\n//             description: video[\"clip\"].description,\n//             uri: video[\"clip\"].uri,\n//             created: video[\"clip\"].created_time,\n//             isFeatured: video.is_featured\n//         }\n//     })\n//     return dictionary\n// }\nexport async function parse(response) {\n  const videoArr = [];\n  await response[\"data\"].forEach(video => {\n    const largestImage = video[\"clip\"][\"pictures\"][\"sizes\"].length - 1;\n    videoArr.push({\n      name: video[\"clip\"].name,\n      description: video[\"clip\"].description,\n      uri: video[\"clip\"].uri,\n      videoID: video[\"clip\"].uri.slice(8),\n      //this may be redundant as I already have the uri, but for ease of access and for unique map key, its here\n      created: video[\"clip\"].created_time,\n      isFeatured: video.is_featured,\n      URLformat: \"https://vimeo.com/\" + video[\"clip\"].uri.slice(8),\n      language: video[\"clip\"].language,\n      duration: video[\"clip\"].duration,\n      plays: video[\"clip\"][\"stats\"].plays,\n      comments: video[\"clip\"][\"metadata\"][\"connections\"][\"comments\"].total,\n      user: video[\"clip\"][\"user\"].name,\n      userLink: video[\"clip\"][\"user\"].link,\n      pictures: video[\"clip\"][\"pictures\"][\"sizes\"][largestImage].link\n    });\n  });\n  return videoArr;\n} // queryBuilder = (param, filterOption, sortOption) => {\n// } \n\nexport function sort(response) {}\nexport function formatTime(seconds) {\n  const duration = new Date(null);\n  duration.setSeconds(seconds);\n  const result = duration.toISOString().substr(11, 8);\n  return seconds >= 3600 ? result : result.slice(3);\n}","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/frontend/serp/src/functions.js"],"names":["parse","response","videoArr","forEach","video","largestImage","length","push","name","description","uri","videoID","slice","created","created_time","isFeatured","is_featured","URLformat","language","duration","plays","comments","total","user","userLink","link","pictures","sort","formatTime","seconds","Date","setSeconds","result","toISOString","substr"],"mappings":"AAAE;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,eAAeA,KAAf,CAAqBC,QAArB,EAA8B;AACjC,QAAMC,QAAQ,GAAG,EAAjB;AAEA,QAAMD,QAAQ,CAAC,MAAD,CAAR,CAAiBE,OAAjB,CAA0BC,KAAD,IAAW;AACtC,UAAMC,YAAY,GAAGD,KAAK,CAAC,MAAD,CAAL,CAAc,UAAd,EAA0B,OAA1B,EAAmCE,MAAnC,GAA4C,CAAjE;AACAJ,IAAAA,QAAQ,CAACK,IAAT,CAAc;AACVC,MAAAA,IAAI,EAAEJ,KAAK,CAAC,MAAD,CAAL,CAAcI,IADV;AAEVC,MAAAA,WAAW,EAAEL,KAAK,CAAC,MAAD,CAAL,CAAcK,WAFjB;AAGVC,MAAAA,GAAG,EAAEN,KAAK,CAAC,MAAD,CAAL,CAAcM,GAHT;AAIVC,MAAAA,OAAO,EAAEP,KAAK,CAAC,MAAD,CAAL,CAAcM,GAAd,CAAkBE,KAAlB,CAAwB,CAAxB,CAJC;AAI2B;AACrCC,MAAAA,OAAO,EAAET,KAAK,CAAC,MAAD,CAAL,CAAcU,YALb;AAMVC,MAAAA,UAAU,EAAEX,KAAK,CAACY,WANR;AAOVC,MAAAA,SAAS,EAAE,uBAAuBb,KAAK,CAAC,MAAD,CAAL,CAAcM,GAAd,CAAkBE,KAAlB,CAAwB,CAAxB,CAPxB;AAQVM,MAAAA,QAAQ,EAAEd,KAAK,CAAC,MAAD,CAAL,CAAcc,QARd;AASVC,MAAAA,QAAQ,EAAEf,KAAK,CAAC,MAAD,CAAL,CAAce,QATd;AAUVC,MAAAA,KAAK,EAAEhB,KAAK,CAAC,MAAD,CAAL,CAAc,OAAd,EAAuBgB,KAVpB;AAWVC,MAAAA,QAAQ,EAAEjB,KAAK,CAAC,MAAD,CAAL,CAAc,UAAd,EAA0B,aAA1B,EAAyC,UAAzC,EAAqDkB,KAXrD;AAYVC,MAAAA,IAAI,EAAEnB,KAAK,CAAC,MAAD,CAAL,CAAc,MAAd,EAAsBI,IAZlB;AAaVgB,MAAAA,QAAQ,EAAEpB,KAAK,CAAC,MAAD,CAAL,CAAc,MAAd,EAAsBqB,IAbtB;AAcVC,MAAAA,QAAQ,EAAEtB,KAAK,CAAC,MAAD,CAAL,CAAc,UAAd,EAA0B,OAA1B,EAAmCC,YAAnC,EAAiDoB;AAdjD,KAAd;AAgBH,GAlBK,CAAN;AAmBA,SAAOvB,QAAP;AACH,C,CAED;AAEA;;AAEA,OAAO,SAASyB,IAAT,CAAc1B,QAAd,EAAwB,CAE9B;AAED,OAAO,SAAS2B,UAAT,CAAqBC,OAArB,EAA8B;AACjC,QAAMV,QAAQ,GAAG,IAAIW,IAAJ,CAAS,IAAT,CAAjB;AACAX,EAAAA,QAAQ,CAACY,UAAT,CAAoBF,OAApB;AACA,QAAMG,MAAM,GAAGb,QAAQ,CAACc,WAAT,GAAuBC,MAAvB,CAA8B,EAA9B,EAAkC,CAAlC,CAAf;AACA,SAAOL,OAAO,IAAI,IAAX,GAAmBG,MAAnB,GAA4BA,MAAM,CAACpB,KAAP,CAAa,CAAb,CAAnC;AACH","sourcesContent":["  // parse = (response) => {\n    //     const dictionary = {}\n    //     response[\"data\"].forEach((video) => {\n    //         dictionary.videos = {\n    //             name: video[\"clip\"].name,\n    //             description: video[\"clip\"].description,\n    //             uri: video[\"clip\"].uri,\n    //             created: video[\"clip\"].created_time,\n    //             isFeatured: video.is_featured\n    //         }\n    //     })\n    //     return dictionary\n    // }\n\n    export async function parse(response){\n        const videoArr = []\n\n        await response[\"data\"].forEach((video) => {\n            const largestImage = video[\"clip\"][\"pictures\"][\"sizes\"].length - 1\n            videoArr.push({\n                name: video[\"clip\"].name,\n                description: video[\"clip\"].description,\n                uri: video[\"clip\"].uri,\n                videoID: video[\"clip\"].uri.slice(8), //this may be redundant as I already have the uri, but for ease of access and for unique map key, its here\n                created: video[\"clip\"].created_time,\n                isFeatured: video.is_featured,\n                URLformat: \"https://vimeo.com/\" + video[\"clip\"].uri.slice(8),\n                language: video[\"clip\"].language,\n                duration: video[\"clip\"].duration, \n                plays: video[\"clip\"][\"stats\"].plays,\n                comments: video[\"clip\"][\"metadata\"][\"connections\"][\"comments\"].total,\n                user: video[\"clip\"][\"user\"].name,\n                userLink: video[\"clip\"][\"user\"].link,\n                pictures: video[\"clip\"][\"pictures\"][\"sizes\"][largestImage].link\n            })\n        })\n        return videoArr\n    } \n\n    // queryBuilder = (param, filterOption, sortOption) => {\n\n    // } \n\n    export function sort(response) {\n\n    }\n\n    export function formatTime (seconds) {\n        const duration = new Date(null)\n        duration.setSeconds(seconds)\n        const result = duration.toISOString().substr(11, 8)\n        return seconds >= 3600  ? result : result.slice(3)\n    }"]},"metadata":{},"sourceType":"module"}