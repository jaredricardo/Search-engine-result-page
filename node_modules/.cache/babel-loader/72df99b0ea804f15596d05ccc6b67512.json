{"ast":null,"code":"export async function parse(response) {\n  const videoArr = [];\n  await response[\"data\"].forEach(video => {\n    const clip = video[\"clip\"];\n    const largestImage = clip[\"pictures\"][\"sizes\"].length - 1;\n    videoArr.push({\n      name: clip.name,\n      description: clip.description,\n      uri: clip.uri,\n      videoID: clip.uri.slice(8),\n      //this may be redundant as I already have the uri, but for ease of access and for unique map key, its here\n      created: clip.created_time,\n      isFeatured: video.is_featured,\n      URLformat: \"https://vimeo.com/\" + video[\"clip\"].uri.slice(8),\n      language: clip.language,\n      duration: clip.duration,\n      plays: clip[\"stats\"].plays,\n      comments: clip[\"metadata\"][\"connections\"][\"comments\"].total,\n      user: clip[\"user\"].name,\n      userLink: clip[\"user\"].link,\n      pictures: clip[\"pictures\"][\"sizes\"][largestImage].link\n    });\n  });\n  return videoArr;\n} // sorting logic \n// export function sort(results, sortType) {\n//     if(sortType === \"Relevance\"){\n//     } \n//     if(sortType === \"Popularity\"){\n//         results.sort((a,b) => { \n//             return (a.plays > b.plays) ? -1 : 1   //had to use plays because favorites was not provided in example data \n//         })\n//     } \n//     if(sortType === \"TitleAZ\"){\n//         results.sort((a,b) => { \n//             return (a.name.toLowerCase() > b.name.toLowerCase()) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"TitleZA\"){\n//         results.sort((a,b) => { \n//             return (a.name.toLowerCase() > b.name.toLowerCase()) ? -1 : 1\n//         })\n//     } \n//     if(sortType === \"Longest\"){\n//         results.sort((a,b) => { \n//             return (a.duration > b.duration) ? -1 : 1\n//         })\n//     } \n//     if(sortType === \"Shortest\"){\n//         results.sort((a,b) => { \n//             return (a.duration > b.duration) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"Newest\"){\n//         results.sort((a,b) => { \n//             return (a.created > b.created) ? -1 : 1\n//         })\n//     } \n//     if(sortType === \"Oldest\"){\n//         results.sort((a,b) => { \n//             return (a.created > b.created) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"UserAZ\"){\n//         results.sort((a,b) => { \n//             return (a.user.toLowerCase() > b.user.toLowerCase()) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"UserZA\"){\n//         results.sort((a,b) => { \n//             return (a.user.toLowerCase() > b.user.toLowerCase()) ? -1 : 1\n//         })\n//     } \n//     return results\n// }\n\nexport function sort(results, sortType) {\n  const table = {\n    Popularity: results.sort((a, b) => {\n      return a.plays > b.plays ? 1 : -1;\n    }),\n    TitleAZ: results.sort((a, b) => {\n      return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n    }),\n    TitleZA: results.sort((a, b) => {\n      return a.name.toLowerCase() > b.name.toLowerCase() ? -1 : 1;\n    }),\n    Longest: results.sort((a, b) => {\n      return a.duration > b.duration ? -1 : 1;\n    }),\n    Shortest: results.sort((a, b) => {\n      return a.duration > b.duration ? 1 : -1;\n    }),\n    Newest: results.sort((a, b) => {\n      return a.created > b.created ? -1 : 1;\n    }),\n    Oldest: results.sort((a, b) => {\n      return a.created > b.created ? 1 : -1;\n    }),\n    UserAZ: results.sort((a, b) => {\n      return a.user.toLowerCase() > b.user.toLowerCase() ? 1 : -1;\n    }),\n    UserZA: results.sort((a, b) => {\n      return a.user.toLowerCase() > b.user.toLowerCase() ? -1 : 1;\n    })\n  };\n  console.log(typeof sortType);\n  console.log(table[sortType]);\n  return table[sortType];\n} // the function below could be written much better / dynamically, \n// but for sake of time it's hard coded and only for 1m - 999m, with no thousand support\n\nexport function formatResultNum(response) {\n  const numResults = response.total;\n  const s = numResults.toString();\n\n  if (numResults > 999999 && numResults < 10000000) {\n    return s[0] + \".\" + s[1] + s[2] + \"M\";\n  }\n\n  if (numResults > 9999999 && numResults < 100000000) {\n    return s[0] + s[1] + \".\" + s[2] + s[3] + \"M\";\n  }\n\n  if (numResults > 99999999) {\n    return s[0] + s[1] + s[2] + \".\" + s[3] + s[4] + \"M\";\n  } else {\n    return s;\n  }\n}\nexport function formatTime(seconds) {\n  if (seconds < 0 || isNaN(seconds)) return null;\n  const duration = new Date(null);\n  duration.setSeconds(seconds);\n  const result = duration.toISOString().substr(11, 8);\n  return seconds >= 3600 ? result : result.slice(3);\n}","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/frontend/serp/src/functions.js"],"names":["parse","response","videoArr","forEach","video","clip","largestImage","length","push","name","description","uri","videoID","slice","created","created_time","isFeatured","is_featured","URLformat","language","duration","plays","comments","total","user","userLink","link","pictures","sort","results","sortType","table","Popularity","a","b","TitleAZ","toLowerCase","TitleZA","Longest","Shortest","Newest","Oldest","UserAZ","UserZA","console","log","formatResultNum","numResults","s","toString","formatTime","seconds","isNaN","Date","setSeconds","result","toISOString","substr"],"mappings":"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","sourcesContent":["export async function parse(response){\n\n    const videoArr = []\n\n    await response[\"data\"].forEach((video) => {\n\n        const clip = video[\"clip\"] \n        const largestImage = clip[\"pictures\"][\"sizes\"].length - 1\n\n        videoArr.push({\n            name: clip.name,\n            description: clip.description,\n            uri: clip.uri,\n            videoID: clip.uri.slice(8), //this may be redundant as I already have the uri, but for ease of access and for unique map key, its here\n            created: clip.created_time,\n            isFeatured: video.is_featured,\n            URLformat: \"https://vimeo.com/\" + video[\"clip\"].uri.slice(8),\n            language: clip.language,\n            duration: clip.duration, \n            plays: clip[\"stats\"].plays,\n            comments: clip[\"metadata\"][\"connections\"][\"comments\"].total,\n            user: clip[\"user\"].name,\n            userLink: clip[\"user\"].link,\n            pictures: clip[\"pictures\"][\"sizes\"][largestImage].link\n        })\n    })\n    return videoArr\n}   \n  \n\n// sorting logic \n\n// export function sort(results, sortType) {\n//     if(sortType === \"Relevance\"){\n\n//     } \n//     if(sortType === \"Popularity\"){\n//         results.sort((a,b) => { \n//             return (a.plays > b.plays) ? -1 : 1   //had to use plays because favorites was not provided in example data \n//         })\n//     } \n//     if(sortType === \"TitleAZ\"){\n//         results.sort((a,b) => { \n//             return (a.name.toLowerCase() > b.name.toLowerCase()) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"TitleZA\"){\n//         results.sort((a,b) => { \n//             return (a.name.toLowerCase() > b.name.toLowerCase()) ? -1 : 1\n//         })\n//     } \n//     if(sortType === \"Longest\"){\n//         results.sort((a,b) => { \n//             return (a.duration > b.duration) ? -1 : 1\n//         })\n//     } \n//     if(sortType === \"Shortest\"){\n//         results.sort((a,b) => { \n//             return (a.duration > b.duration) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"Newest\"){\n//         results.sort((a,b) => { \n//             return (a.created > b.created) ? -1 : 1\n//         })\n//     } \n//     if(sortType === \"Oldest\"){\n//         results.sort((a,b) => { \n//             return (a.created > b.created) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"UserAZ\"){\n//         results.sort((a,b) => { \n//             return (a.user.toLowerCase() > b.user.toLowerCase()) ? 1 : -1\n//         })\n//     } \n//     if(sortType === \"UserZA\"){\n//         results.sort((a,b) => { \n//             return (a.user.toLowerCase() > b.user.toLowerCase()) ? -1 : 1\n//         })\n//     } \n//     return results\n// }\n\nexport function sort(results, sortType) {\n    const table = {\n        Popularity: results.sort((a,b) => { return (a.plays > b.plays) ? 1 : -1 }),\n        TitleAZ: results.sort((a,b) => { return (a.name.toLowerCase() > b.name.toLowerCase()) ? 1 : -1 }),\n        TitleZA: results.sort((a,b) => { return (a.name.toLowerCase() > b.name.toLowerCase()) ? -1 : 1 }),\n        Longest: results.sort((a,b) => { return (a.duration > b.duration) ? -1 : 1 }),\n        Shortest: results.sort((a,b) => { return (a.duration > b.duration) ? 1 : -1 }),\n        Newest: results.sort((a,b) => { return (a.created > b.created) ? -1 : 1 }),\n        Oldest: results.sort((a,b) => { return (a.created > b.created) ? 1 : -1 }),\n        UserAZ: results.sort((a,b) => { return (a.user.toLowerCase() > b.user.toLowerCase()) ? 1 : -1 }),\n        UserZA: results.sort((a,b) => { return (a.user.toLowerCase() > b.user.toLowerCase()) ? -1 : 1 })\n    }\n    console.log(typeof sortType)\n    console.log(table[sortType])\n    return table[sortType]\n}\n\n// the function below could be written much better / dynamically, \n// but for sake of time it's hard coded and only for 1m - 999m, with no thousand support\n\nexport function formatResultNum(response) {\n    const numResults = response.total\n    const s = numResults.toString()\n    if (numResults > 999999 && numResults < 10000000 ) {\n        return s[0] + \".\" + s[1] + s[2] + \"M\"\n    } \n    if (numResults > 9999999 && numResults < 100000000) {\n        return s[0] + s[1] + \".\" + s[2] + s[3] + \"M\"\n    }\n    if (numResults > 99999999) {\n        return s[0] + s[1] + s[2] + \".\" + s[3] + s[4] + \"M\"\n    } else {\n        return s\n    }\n}\n\nexport function formatTime (seconds) {\n    if(seconds < 0 || isNaN(seconds)) return null\n    const duration = new Date(null)\n    duration.setSeconds(seconds)\n    const result = duration.toISOString().substr(11, 8)\n    return seconds >= 3600  ? result : result.slice(3)\n}"]},"metadata":{},"sourceType":"module"}